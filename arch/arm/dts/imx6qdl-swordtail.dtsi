/*
 * Copyright 2012-2016 Freescale Semiconductor, Inc.
 * Copyright 2011 Linaro Ltd.
 *
 * The code contained herein is licensed under the GNU General Public
 * License. You may obtain a copy of the GNU General Public License
 * Version 2 or later at the following locations:
 *
 * http://www.opensource.org/licenses/gpl-license.html
 * http://www.gnu.org/copyleft/gpl.html
 */

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	aliases {
		mxcfb0 = &mxcfb1;
                mxcfb1 = &mxcfb2;
	};

	chosen {
		stdout-path = &uart1;
	};

	leds {
		compatible = "gpio-leds";
		cpu-user-led {
			gpios = <&gpio2 0 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat"; /* blink PLED */
			retain-state-suspended;
		};
	};

        regulators {

                compatible = "simple-bus";
                #address-cells = <1>;
                #size-cells = <0>;
  
  
                /* MJ: updates 1/31/18, add a 5V regulator for use as vin-supply for USB and HDMI */
                reg_5v: regulator@0{
                        compatible = "regulator-fixed";
                        reg = <0>;
                        regulator-name = "5V_Supply";
                        regulator-min-microvolt = <5000000>;
                        regulator-max-microvolt = <5000000>;
	  		startup-delay-us = <70000>;
                        regulator-boot-on;
                };
  
                reg_usb_h1_vbus: regulator@1{
                        compatible = "regulator-fixed";
                        reg = <1>;
                        regulator-name = "usb_h1_vbus";
                        regulator-min-microvolt = <5000000>;
                        regulator-max-microvolt = <5000000>;
                        gpio = <&gpio3 31 GPIO_ACTIVE_HIGH>;
                        enable-active-high;
                        vin-supply = <&reg_5v>;
                };
  
                reg_usb_otg_vbus: regulator@2{
                        compatible = "regulator-fixed";
                        reg = <2>;
                        regulator-name = "usb_otg_vbus";
                        regulator-min-microvolt = <5000000>;
                        regulator-max-microvolt = <5000000>;
                        gpio = <&gpio3 22 1>;
                        enable-active-high;
                        vin-supply = <&reg_5v>;
                };
 
                reg_hdmi: regulator@5 {
                        compatible = "regulator-fixed";
                        reg = <5>;
                        regulator-name = "hdmi-5v-supply";
                        regulator-min-microvolt = <5000000>;
                        regulator-max-microvolt = <5000000>;
                        enable-active-high;
                        hdmi-5v-supply = <&reg_5v>;
                };

		reg_wl: regulator-wl { /* add */
			compatible = "regulator-fixed"; /* add */
			regulator-name = "wl"; /* add */
			gpio = <&gpio7 0 GPIO_ACTIVE_HIGH>; /* add - WiFi Regulator Enable, GPIO7_IO00 */
			startup-delay-us = <100>; /* add - enable after 100us*/
			enable-active-high; /* add */
			regulator-min-microvolt = <1800000>; /* add */
			regulator-max-microvolt = <1800000>; /* add */
			regulator-always-on; /* add */
		}; /* add */
		
		reg_bt: regulator-bt { /* add */
			compatible = "regulator-fixed"; /* add */
			regulator-name = "bt"; /* add */
			gpio = <&gpio7 1 GPIO_ACTIVE_HIGH>; /* add - Bluetooth Regulator Enable, GPIO7_IO01 */
			startup-delay-us = <100>; /* add - enable after 100us */
			enable-active-high; /* add */
			regulator-min-microvolt = <1800000>; /* add */
			regulator-max-microvolt = <1800000>; /* add */
			regulator-always-on; /* add */
		}; /* add */

	};

	sound-hdmi {
		compatible = "fsl,imx6q-audio-hdmi",
			     "fsl,imx-audio-hdmi";
		model = "imx-audio-hdmi";
		hdmi-controller = <&hdmi_audio>;
	};

	/* LVDS to VGA converter (or LVDS Panel) */
        mxcfb1: fb@0 {
                compatible = "fsl,mxc_sdc_fb";
                disp_dev = "ldb";
                interface_pix_fmt = "RGB666";
                default_bpp = <16>; 
                int_clk = <0>;
                late_init = <0>;
                status = "disabled";
        };
	backlight {
		compatible = "pwm-backlight";
		pwms = <&pwm1 0 5000000>;
		brightness-levels = <0 4 8 16 32 64 128 255>;
		default-brightness-level = <7>;
		enable-gpios = <&gpio6 15 GPIO_ACTIVE_HIGH>;
		status = "okay";
	};

        /* HDMI video settings */
        mxcfb2: fb@1 {
                compatible = "fsl,mxc_sdc_fb";
                disp_dev = "hdmi";
                interface_pix_fmt = "RGB24";
                mode_str ="1920x1080M@60";
                default_bpp = <24>;
                int_clk = <0>;
                late_init = <0>;
                status = "okay";
        };

	v4l2_out {
		compatible = "fsl,mxc_v4l2_output";
		status = "okay";
	};

};

/* no Audio Codec on Swordtail */
&audmux {
	status = "disabled";
};

&cpu0 {
/*
	arm-supply = <&sw1a_reg>;
	soc-supply = <&sw1c_reg>;
*/
};

&ecspi1 {
        fsl,spi-num-chipselects = <1>;
        cs-gpios = <
		&gpio2 30 GPIO_ACTIVE_LOW
		>; 
        pinctrl-names = "default";
        pinctrl-0 = <&pinctrl_ecspi1 &pinctrl_ecspi1_cs>;
        status = "okay";

        flash0: w25x16@0 {
                #address-cells = <1>;
                #size-cells = <1>;
                compatible = "w25x16", "jedec,spi-nor";
                spi-max-frequency = <20000000>;
                reg = <0>;
        };
};

/* no SPI2 on Swordtail */
&ecspi2 {
        status = "disabled";

};

/* no SPI3 on Swordtail */
&ecspi3 {
	status = "disabled";
};

&fec {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_enet>;
	phy-mode = "rgmii";
/*
	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
	phy-reset-duration = <100>;
*/
	/*fsl,magic-packet;*/
	status = "okay";
        txen-skew-ps = <0>;
        txc-skew-ps = <3000>;
        rxdv-skew-ps = <0>;
        rxc-skew-ps = <3000>;
        rxd0-skew-ps = <0>;
        rxd1-skew-ps = <0>;
        rxd2-skew-ps = <0>;
        rxd3-skew-ps = <0>;
        txd0-skew-ps = <0>;
        txd1-skew-ps = <0>;
        txd2-skew-ps = <0>;
        txd3-skew-ps = <0>;
};

&gpc {
	fsl,ldo-bypass = <1>; /* use ldo-bypass, u-boot will check it and configure */
	fsl,wdog-reset = <2>; /* watchdog select of reset source */
};

&dcic1 {
	dcic_id = <0>;
	dcic_mux = "dcic-hdmi";
	status = "okay";
};

&dcic2 {
	dcic_id = <1>;
	dcic_mux = "dcic-lvds0";
	status = "okay";
};

&hdmi_audio {
	status = "okay";
};

&hdmi_cec {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hdmi_cec>;
	status = "okay";
};

&hdmi_core {
	ipu_id = <0>;
	disp_id = <0>;
	status = "okay";
};

&hdmi_video {
	fsl,phy_reg_vlev = <0x0294>;
	fsl,phy_reg_cksymtx = <0x800d>;
	HDMI-supply = <&reg_hdmi>; /* 5V */
	status = "okay";
};

&ldb {
	status = "okay";

	lvds-channel@0 {
                crtc = "ipu2-di0";
		fsl,data-mapping = "spwg";
		fsl,data-width = <18>; /* change for panel type */
                primary;
		status = "okay";

		display-timings {
			native-mode = <&timing0>;
			timing0: hsd100pxn1 {
				clock-frequency = <65000000>;
				hactive = <1024>;
				vactive = <768>;
				hback-porch = <220>;
				hfront-porch = <40>;
				vback-porch = <21>;
				vfront-porch = <7>;
				hsync-len = <60>;
				vsync-len = <10>;
			};
		};
	};
};
/* I2C1 Not used in Swordtail */
&i2c1 {
	status = "disabled";
}; 

&i2c2 {
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c2>;
	status = "okay";

	/* test board device */
        bme280@77 {
                compatible = "bosch,bme280";
                reg = <0x77>;
        };

};

/* On-board devices only */
&i2c3 {
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c3>;
	status = "okay";

	pmic: pfuze100@08 {
		compatible = "fsl,pfuze100";
		reg = <0x08>;

           regulators {

                /* SW1AB = V1P375_CORE, sequence #2 */
                sw1a_reg: sw1ab {
                     regulator-min-microvolt = <900000>;
                     regulator-max-microvolt = <1375000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SW1C = V1P375_SOC, sequence #3 */
                sw1c_reg: sw1c {
                     regulator-min-microvolt = <900000>;
                     regulator-max-microvolt = <1375000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SW2 = V3P3, sequence #6 */
                sw2_reg: sw2 {
                     regulator-min-microvolt = <3300000>;
                     regulator-max-microvolt = <3300000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SW3A and SW3B = V1P35_DDR, sequence #4 */
                sw3a_reg: sw3a {
                     regulator-min-microvolt = <1350000>;
                     regulator-max-microvolt = <1350000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SW3A and SW3B = V1P35_DDR, sequence #4 */
                sw3b_reg: sw3b {
                     regulator-min-microvolt = <1350000>;
                     regulator-max-microvolt = <1350000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SW4 = V0P675_DDR_VTT = 0.5(SW3A) when VTT = Enabled, sequence #4 */
                sw4_reg: sw4 {
                     regulator-min-microvolt = <675000>;
                     regulator-max-microvolt = <675000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* SWBST (NOT USED), sequence #0 */

                /* VSNVS = V3_VSNVS (Coin Cell/LDO in PMIC), not sequenced */
                /* Always on per battery or on per Vin */
                snvs_reg: vsnvs {
                     regulator-min-microvolt = <1000000>;
                     regulator-max-microvolt = <3000000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* VREFDDR = V0P675_DDR_VREF, sequence #4 */
                vref_reg: vrefddr {
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* VGEN1 = V1P5_MINI, sequence #31 */
                /* last rail to turn on, delays reset release */
                vgen1_reg: vgen1 {
                     regulator-min-microvolt = <1500000>;
                     regulator-max-microvolt = <1500000>;
                     /*regulator-boot-on;*/
                     /*regulator-always-on;*/
				
				/* Suspend-to-RAM allows for turning off ??? */
				/*regulator-state-mem {
					regulator-off-in-suspend;
				};
                           */
				/* Suspend-to-DISK allows for turning off ??? */
				/*regulator-state-disk {
					regulator-off-in-suspend;
				};
                           */
			};
                /* VGEN2 = V1P2_ETH, sequence #9 */
                vgen2_reg: vgen2 {
                     regulator-min-microvolt = <1200000>;
                     regulator-max-microvolt = <1200000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* VGEN3 = V1P8_AUDIO, sequence #6 */
                vgen3_reg: vgen3 {
                     regulator-min-microvolt = <1800000>;
                     regulator-max-microvolt = <1800000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* VGEN4 (NOT USED), sequence #0 */

                /* VGEN5 = V2P5_ETH, sequence #8 */
                vgen5_reg: vgen5 {
                     regulator-min-microvolt = <2500000>;
                     regulator-max-microvolt = <2500000>;
                     regulator-boot-on;
                     regulator-always-on;
                };

                /* VGEN6 = V3_ALWAYS, sequence #1 */
                vgen6_reg: vgen6 {
                     regulator-min-microvolt = <3000000>;
                     regulator-max-microvolt = <3000000>;
                     regulator-boot-on;
                     regulator-always-on;
                };
	    };
	};

        hdmi_edid: edid@50 {
                compatible = "fsl,imx6-hdmi-i2c";
                reg = <0x50>;
        };

};

&clks {
        assigned-clocks = <&clks IMX6QDL_CLK_LDB_DI0_SEL>,
                          <&clks IMX6QDL_CLK_LDB_DI1_SEL>;
        assigned-clock-parents = <&clks IMX6QDL_CLK_PLL2_PFD0_352M>,
                                 <&clks IMX6QDL_CLK_PLL2_PFD0_352M>;
};

&can1 {
        pinctrl-names = "default";
        pinctrl-0 = <&pinctrl_flexcan1>;
	xceiver-supply = <&sw2_reg>; 
        status = "okay";
};

/* no CAN2 on Swordtail */
&can2 {
        status = "disabled";
};

/* MJ - Added Wi-Fi and BT (sd3 and gpios = pinctrl_usdhc3; uart3=pinctrl_uart3) */
/* MJ - Added Cellular (uart2 and gpios = pinctrl_uart2) */

&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog>;
	
	imx6qdl-zebra {
		pinctrl_hog: hoggrp {
			fsl,pins = <
				/* UNUSED PINS -- set drivers = Hi-z and enable 100k pull res */
				MX6QDL_PAD_CSI0_DAT12__GPIO5_IO30	0x0000B000
				MX6QDL_PAD_CSI0_DAT13__GPIO5_IO31	0x0000B000
				MX6QDL_PAD_CSI0_DAT14__GPIO6_IO00	0x0000B000
				MX6QDL_PAD_CSI0_DAT15__GPIO6_IO01	0x0000B000
				MX6QDL_PAD_CSI0_DAT16__GPIO6_IO02	0x0000B000
				MX6QDL_PAD_CSI0_DAT17__GPIO6_IO03	0x0000B000
				MX6QDL_PAD_CSI0_DAT18__GPIO6_IO04	0x0000B000
				MX6QDL_PAD_CSI0_DAT19__GPIO6_IO05	0x0000B000
				MX6QDL_PAD_CSI0_DAT4__GPIO5_IO22	0x0000B000
				MX6QDL_PAD_CSI0_DAT5__GPIO5_IO23	0x0000B000
				MX6QDL_PAD_CSI0_DAT6__GPIO5_IO24	0x0000B000
				MX6QDL_PAD_CSI0_DAT7__GPIO5_IO25	0x0000B000
				MX6QDL_PAD_CSI0_DAT8__GPIO5_IO26	0x0000B000
				MX6QDL_PAD_CSI0_DAT9__GPIO5_IO27	0x0000B000
				MX6QDL_PAD_CSI0_DATA_EN__GPIO5_IO20	0x0000B000
				MX6QDL_PAD_CSI0_MCLK__GPIO5_IO19	0x0000B000
				MX6QDL_PAD_DI0_DISP_CLK__GPIO4_IO16	0x0000B000
				MX6QDL_PAD_DI0_PIN15__GPIO4_IO17	0x0000B000
				MX6QDL_PAD_DI0_PIN3__GPIO4_IO19		0x0000B000
				MX6QDL_PAD_DI0_PIN4__GPIO4_IO20		0x0000B000
				MX6QDL_PAD_DISP0_DAT11__GPIO5_IO05	0x0000B000
				MX6QDL_PAD_DISP0_DAT13__GPIO5_IO07	0x0000B000
				MX6QDL_PAD_DISP0_DAT14__GPIO5_IO08	0x0000B000
				MX6QDL_PAD_DISP0_DAT16__GPIO5_IO10	0x0000B000
				MX6QDL_PAD_DISP0_DAT17__GPIO5_IO11	0x0000B000
				MX6QDL_PAD_DISP0_DAT18__GPIO5_IO12	0x0000B000
				MX6QDL_PAD_DISP0_DAT19__GPIO5_IO13	0x0000B000
				MX6QDL_PAD_DISP0_DAT20__GPIO5_IO14	0x0000B000
				MX6QDL_PAD_DISP0_DAT21__GPIO5_IO15	0x0000B000
				MX6QDL_PAD_DISP0_DAT23__GPIO5_IO17	0x0000B000
				MX6QDL_PAD_DISP0_DAT0__GPIO4_IO21	0x0000B000
				MX6QDL_PAD_DISP0_DAT1__GPIO4_IO22	0x0000B000
				MX6QDL_PAD_DISP0_DAT2__GPIO4_IO23	0x0000B000
				MX6QDL_PAD_DISP0_DAT3__GPIO4_IO24	0x0000B000
				MX6QDL_PAD_DISP0_DAT4__GPIO4_IO25	0x0000B000
				MX6QDL_PAD_DISP0_DAT5__GPIO4_IO26	0x0000B000
				MX6QDL_PAD_DISP0_DAT6__GPIO4_IO27	0x0000B000
				MX6QDL_PAD_DISP0_DAT7__GPIO4_IO28	0x0000B000
				MX6QDL_PAD_EIM_A16__GPIO2_IO22		0x0000B000
				MX6QDL_PAD_EIM_A17__GPIO2_IO21		0x0000B000
				MX6QDL_PAD_EIM_A18__GPIO2_IO20		0x0000B000
				MX6QDL_PAD_EIM_A19__GPIO2_IO19		0x0000B000
				MX6QDL_PAD_EIM_A20__GPIO2_IO18		0x0000B000
				MX6QDL_PAD_EIM_A21__GPIO2_IO17		0x0000B000
				MX6QDL_PAD_EIM_A22__GPIO2_IO16		0x0000B000
				MX6QDL_PAD_EIM_A23__GPIO6_IO06		0x0000B000
				MX6QDL_PAD_EIM_A24__GPIO5_IO04		0x0000B000
				MX6QDL_PAD_EIM_BCLK__GPIO6_IO31		0x0000B000
				MX6QDL_PAD_EIM_DA0__GPIO3_IO00		0x0000B000
				MX6QDL_PAD_EIM_DA1__GPIO3_IO01		0x0000B000
				MX6QDL_PAD_EIM_DA10__GPIO3_IO10		0x0000B000
				MX6QDL_PAD_EIM_DA11__GPIO3_IO11		0x0000B000
				MX6QDL_PAD_EIM_DA12__GPIO3_IO12		0x0000B000
				MX6QDL_PAD_EIM_DA13__GPIO3_IO13		0x0000B000
				MX6QDL_PAD_EIM_DA14__GPIO3_IO14		0x0000B000
				MX6QDL_PAD_EIM_DA15__GPIO3_IO15		0x0000B000
				MX6QDL_PAD_EIM_DA2__GPIO3_IO02		0x0000B000
				MX6QDL_PAD_EIM_DA3__GPIO3_IO03		0x0000B000
				MX6QDL_PAD_EIM_DA4__GPIO3_IO04		0x0000B000
				MX6QDL_PAD_EIM_DA5__GPIO3_IO05		0x0000B000
				MX6QDL_PAD_EIM_DA6__GPIO3_IO06		0x0000B000
				MX6QDL_PAD_EIM_DA7__GPIO3_IO07		0x0000B000
				MX6QDL_PAD_EIM_DA8__GPIO3_IO08		0x0000B000
				MX6QDL_PAD_EIM_DA9__GPIO3_IO09		0x0000B000
				MX6QDL_PAD_EIM_D21__GPIO3_IO21		0x0000B000
				MX6QDL_PAD_EIM_EB0__GPIO2_IO28		0x0000B000
				MX6QDL_PAD_EIM_EB1__GPIO2_IO29		0x0000B000
				MX6QDL_PAD_EIM_LBA__GPIO2_IO27		0x0000B000
				MX6QDL_PAD_EIM_WAIT__GPIO5_IO00		0x0000B000
				MX6QDL_PAD_ENET_RX_ER__GPIO1_IO24	0x0000B000
				MX6QDL_PAD_ENET_RXD0__GPIO1_IO27	0x0000B000
				MX6QDL_PAD_ENET_TXD0__GPIO1_IO30	0x0000B000
				MX6QDL_PAD_ENET_TXD1__GPIO1_IO29	0x0000B000
				MX6QDL_PAD_GPIO_0__GPIO1_IO00		0x0000B000
				MX6QDL_PAD_GPIO_17__GPIO7_IO12		0x0000B000
				MX6QDL_PAD_GPIO_18__GPIO7_IO13		0x0000B000
				MX6QDL_PAD_GPIO_19__GPIO4_IO05		0x0000B000
				MX6QDL_PAD_KEY_COL2__GPIO4_IO10		0x0000B000
				MX6QDL_PAD_KEY_ROW4__GPIO4_IO15		0x0000B000
				MX6QDL_PAD_NANDF_CS0__GPIO6_IO11	0x0000B000
				MX6QDL_PAD_NANDF_CS1__GPIO6_IO14	0x0000B000
				MX6QDL_PAD_NANDF_D1__GPIO2_IO01		0x0000B000				
				MX6QDL_PAD_NANDF_D2__GPIO2_IO02		0x0000B000
				MX6QDL_PAD_NANDF_RB0__GPIO6_IO10	0x0000B000
				MX6QDL_PAD_NANDF_WP_B__GPIO6_IO09	0x0000B000
                                MX6QDL_PAD_EIM_CS0__GPIO2_IO23          0x0000B000
                                MX6QDL_PAD_EIM_OE__GPIO2_IO25           0x0000B000
                                MX6QDL_PAD_EIM_CS1__GPIO2_IO24          0x0000B000
				MX6QDL_PAD_EIM_RW__GPIO2_IO26           0x0000B000

                                /* Programmable LED (CPU_PLED) output for User I/O */
				MX6QDL_PAD_NANDF_D0__GPIO2_IO00         0x0001B018
				/* Wireless Disable (DISABLE_W#), default to off (pull-up since active low) */
				MX6QDL_PAD_NANDF_D3__GPIO2_IO03		0x0001B098

                                /* Updated for TP - can probe for 24MHz ref clk */
                                MX6QDL_PAD_GPIO_3__XTALOSC_REF_CLK_24M     0x00013098 
                                /* Updated for TP - can probe for 32KHz ref clk */
				/* MJ: pin repurposed as FLEXCAN1_RX */ 
                                /*MX6QDL_PAD_GPIO_8__XTALOSC_REF_CLK_32K     0x00013098*/ 

                                /* COMP_IRQ# input on Tetra and Zebra, NC for Swordtail */
				/* 0x0000B000 assignment is only pull-up enabled */
				MX6QDL_PAD_DI0_PIN2__GPIO4_IO18            0x0000B000
                                
				/* PMIC_INT# input (pull-up = off by default) */
				MX6QDL_PAD_DISP0_DAT12__GPIO5_IO06         0x0001B0B0

                                /* was USB_HUB_RST# out for Tetra, NC for Zebra and Swordtail */
				/* 0x0000B000 assignment is only pull-up enabled */
				MX6QDL_PAD_DISP0_DAT22__GPIO5_IO16         0x0000B000

                                /* SOC_RSTOUT# out (pull-up = off by default) */
 				MX6QDL_PAD_EIM_A25__GPIO5_IO02             0x0001B030
   
                                /* LVDS control/status signals on Tetra and Swordtail */ 
				/* LVDS_BKLTEN: Slow slew, 90 Ohm, Slow speed, pull-down settings */
				MX6QDL_PAD_NANDF_CS2__GPIO6_IO15	   0x00013018                       		
				/* GPIO6_IO16 is LVDS_PANEL_PWREN output for Tetra and Swordtail */
                                MX6QDL_PAD_NANDF_CS3__GPIO6_IO16           0x00013018 
                                /* GPIO6_IO07 is PG_V3P3_LVDS input for Tetra and Swordtail */
				MX6QDL_PAD_NANDF_CLE__GPIO6_IO07           0x0001B018 

                                /* section for multifunction pins. Choose one function for each pin */                                  
                                /* PIN1: GPIO1/GPT_OUT1/PWM_OUT4 */
                                MX6QDL_PAD_SD1_CMD__GPIO1_IO18             0x0001B018 /* GPIO 1 */
                                /* MX6QDL_PAD_SD1_CMD__PWM4_OUT               0x0001B018 */ /* PWM_OUT4 */
                                /* MX6QDL_PAD_SD1_CMD__GPT_COMPARE1           0x0001B018 */ /* GPT_OUT1 */

				/* PIN2: GPIO2/GPT_IN1 */
                                MX6QDL_PAD_SD1_DAT0__GPIO1_IO16            0x0001B018 /* GPIO 2 */
                                /* MX6QDL_PAD_SD1_DAT0__GPT_CAPTURE1          0x0001B018 */ /* GPT_IN1 */

				/* PIN3: GPIO3/GPT_IN2/PWM_OUT3 */
                                MX6QDL_PAD_SD1_DAT1__GPIO1_IO17            0x0001B018 /* GPIO 3 */
                                /* MX6QDL_PAD_SD1_DAT1__PWM3_OUT              0x0001B018 */ /* PWM_OUT3 */
                                /* MX6QDL_PAD_SD1_DAT1__GPT_CAPTURE2          0x0001B018 */ /* GPT_IN2 */

				/* PIN4: GPIO4/GPT_OUT2/WDOG1_RST# */
                                MX6QDL_PAD_SD1_DAT2__GPIO1_IO19            0x0001B018 /* GPIO 4 */
                                /* MX6QDL_PAD_SD1_DAT2__GPT_COMPARE2          0x0001B018 */ /* GPT_OUT2 */
                                /* MX6QDL_PAD_SD1_DAT2__WDOG1_RESET_B_DEB     0x0001B018 */ /* WDOG1_RST# */

				/* PIN5: GPIO5/GPT_CLKIN */
                                MX6QDL_PAD_SD1_CLK__GPIO1_IO20             0x0001B018 /* GPIO 5 */
                                /* MX6QDL_PAD_SD1_CLK__GPT_CLKIN              0x0001B018 */ /* GPT_CLKIN */

				/* PIN6: GPIO 6 */
                                MX6QDL_PAD_DISP0_DAT10__GPIO4_IO31         0x0001B018 /* GPIO 6 */

				/* PIN7: GPIO7/PWM_OUT2/WDOG2# */
                                MX6QDL_PAD_DISP0_DAT9__GPIO4_IO30          0x0001B018 /* GPIO 7 */
                                /* MX6QDL_PAD_DISP0_DAT9__PWM2_OUT            0x0001B018 */ /*PWM_OUT2 */
				/* MX6QDL_PAD_DISP0_DAT9__WDOG2_B            0x0001B018 */ /*WDOG2# */

				/* PIN8: GPIO 8 */
                                MX6QDL_PAD_DISP0_DAT8__GPIO4_IO29          0x0001B018 /* GPIO 8 */

                                /* GP_IRQ#, set as open drain (might have mult. drivers) */
                                MX6QDL_PAD_DISP0_DAT15__GPIO5_IO09         0x0001B818 

			>;
		};

		pinctrl_flexcan1: flexcan1grp {
			fsl,pins = <
				/* MJ - Had to move the RX and TX pins for Swordtail */
				MX6QDL_PAD_GPIO_8__FLEXCAN1_RX             0x0001B098
				MX6QDL_PAD_GPIO_7__FLEXCAN1_TX             0x0001B098
				/* currently unused CAN transceiver control signals */
                                /* set to 100k pull-down, 90 Ohm, low spd, slow slew */ 
                                /* FLEXCAN1_CTRL - pull-down */
				MX6QDL_PAD_NANDF_D6__GPIO2_IO06            0x00013018
                                /* FLEXCAN1_STBY - pull-down */ /* MJ - Had to move this pin */
				MX6QDL_PAD_NANDF_D7__GPIO2_IO07            0x00013018
			>;
		};

		pinctrl_ecspi1: ecspi1grp {
			fsl,pins = <
                                /* set fast slew, 33 Ohm driver, pull-down */
				MX6QDL_PAD_EIM_D16__ECSPI1_SCLK            0x000130B9
				MX6QDL_PAD_EIM_D17__ECSPI1_MISO            0x00013099
				MX6QDL_PAD_EIM_D18__ECSPI1_MOSI            0x00013099
			>;
		};
		pinctrl_ecspi1_cs: ecspi1cs {
                        fsl,pins = <
				MX6QDL_PAD_EIM_EB2__GPIO2_IO30		   0x0001B098
                        >;
                };

		pinctrl_i2c2: i2c2grp {
			fsl,pins = <
				MX6QDL_PAD_KEY_COL3__I2C2_SCL              0x4001b899
				MX6QDL_PAD_KEY_ROW3__I2C2_SDA              0x4001b899
			 >;
		};

		/* MJ - this is the on-board devices I2C bus */
                pinctrl_i2c3: i2c3grp {
                        fsl,pins = <
                                MX6QDL_PAD_GPIO_5__I2C3_SCL                0x4001b899
                                MX6QDL_PAD_GPIO_16__I2C3_SDA               0x4001b899
                        >;
                };

		/*  MJ changes to pin control for ENET_MDIO (lower drive strength 60 Ohm) 
                 *  and ENET_CRS_DV (RGMII_RST#) set as open-drain output with pull-up */
		pinctrl_enet: enetgrp {
			fsl,pins = <
				MX6QDL_PAD_ENET_MDC__ENET_MDC              0x0001B0B0
				MX6QDL_PAD_ENET_MDIO__ENET_MDIO            0x0001B0A0
				MX6QDL_PAD_ENET_REF_CLK__ENET_TX_CLK       0x0001B0B0
				MX6QDL_PAD_RGMII_RD0__RGMII_RD0            0x0001B030
				MX6QDL_PAD_RGMII_RD1__RGMII_RD1            0x0001B030
				MX6QDL_PAD_RGMII_RD2__RGMII_RD2            0x0001B030
				MX6QDL_PAD_RGMII_RD3__RGMII_RD3            0x0001B030
				MX6QDL_PAD_RGMII_RXC__RGMII_RXC            0x00013030
				MX6QDL_PAD_RGMII_RX_CTL__RGMII_RX_CTL      0x00013030
				MX6QDL_PAD_RGMII_TD0__RGMII_TD0            0x0001B030
				MX6QDL_PAD_RGMII_TD1__RGMII_TD1            0x0001B030
				MX6QDL_PAD_RGMII_TD2__RGMII_TD2            0x0001B030
				MX6QDL_PAD_RGMII_TD3__RGMII_TD3            0x0001B030
				MX6QDL_PAD_RGMII_TXC__RGMII_TXC            0x00013030
				MX6QDL_PAD_RGMII_TX_CTL__RGMII_TX_CTL      0x00013030
                                /* RGMII_RST#, preserve u-boot pad control like SabreSD */
				MX6QDL_PAD_ENET_CRS_DV__GPIO1_IO25         0x80000000
				/* RGMII_INT# and RGMII_INT#_STATUS inputs respectively (GPIO)*/
                                MX6QDL_PAD_ENET_RXD1__GPIO1_IO26           0x0001B0B0
                                MX6QDL_PAD_ENET_TX_EN__GPIO1_IO28          0x0001B0B0
			>;
		};

		pinctrl_hdmi_cec: hdmicecgrp {
			fsl,pins = <
				MX6QDL_PAD_KEY_ROW2__HDMI_TX_CEC_LINE      0x00010898
			>;
		};

		pinctrl_pwm1: pwm1grp {
			fsl,pins = <
				/* LVDS_PWMO: Fast slew, 90 Ohm, Medium speed settings */
				MX6QDL_PAD_SD1_DAT3__PWM1_OUT              0x0001B099
			>;
		};

		pinctrl_usbotg: usbotggrp {
			fsl,pins = <
				/* MX6QDL_PAD_EIM_D22__USB_OTG_PWR            0x00013098*/
                                MX6QDL_PAD_EIM_D22__GPIO3_IO22  	   0x010b0 /* PWR EN as GPIO */
				MX6QDL_PAD_GPIO_1__USB_OTG_ID              0x10759 /*0x0001B0B0*/
				MX6QDL_PAD_KEY_COL4__USB_OTG_OC            0x0001B0B0
			>;
		};

                pinctrl_usbh1: usbh1grp {
                        fsl,pins = <
                                MX6QDL_PAD_EIM_D30__USB_H1_OC           0x0001B0B0
	                        /*MX6QDL_PAD_EIM_D31__USB_H1_PWR          0x0001B098*/
				MX6QDL_PAD_EIM_D31__GPIO3_IO31          0x010b0 /* PWR EN as GPIO */
				/* Updated for USB Host Port eSwitch Controls, pull-down, 90 Ohm, slow slew */
                                MX6QDL_PAD_CSI0_PIXCLK__GPIO5_IO18      0x00013098 /* USB1_SW_OE#, replaced ARM_EVENTO Test Point */
				MX6QDL_PAD_CSI0_VSYNC__GPIO5_IO21	0x00013098 /* USB1_SW_SEL */
                        >;
                };
		
             /* MJ: default = 0x0001B0B0, update some to lower drive strength and  
                slow down the speed (Set to Slow instead of default of Medium) */
		pinctrl_uart1: uart1grp {
			fsl,pins = <
				/* DCE Mode */
				MX6QDL_PAD_CSI0_DAT10__UART1_TX_DATA       0x0001B018
				MX6QDL_PAD_CSI0_DAT11__UART1_RX_DATA       0x0001B018
                                MX6QDL_PAD_EIM_D19__UART1_CTS_B            0x0001B018
                                MX6QDL_PAD_EIM_D20__UART1_RTS_B            0x0001B018
                                /* RS-232 transceiver signals for COM1/serial debug port */
                                /* XCVR1_RXEN#, pull-down to auto-enable */
				MX6QDL_PAD_NANDF_D4__GPIO2_IO04            0x00013018
                                /* XCVR1_SHDN#, pull-up to disable shutdown of device */
				MX6QDL_PAD_NANDF_D5__GPIO2_IO05            0x0001B018
			>;
		};

		/* MJ: need to set these up for DTE mode matching, imx6q/dl-pinfunc.h naming convention info sets 
		 * up the IOMUXC_UART2_UART_RX_DATA_SELECT_INPUT accordingly when named this way, so all that
		 * is left is to set this UART to initialize in DTE mode */
                pinctrl_uart2: uart2grp {
                        fsl,pins = <
				/* Cellular Socket UART interface */
				/* schematic name = UART2_RXD */
                                MX6QDL_PAD_EIM_D26__UART2_RX_DATA          0x0001B018  /* input pin for DTE mode */
				/* schematic name = UART2_TXD */
                                MX6QDL_PAD_EIM_D27__UART2_TX_DATA          0x0001B018  /* output pin for DTE mode */
				/* schematic name = UART2_CTS# */
				MX6QDL_PAD_EIM_D28__UART2_RTS_B		   0x0001B018  /* input pin for DTE mode */
				/* schematic name = UART2_RTS# */
				MX6QDL_PAD_EIM_D29__UART2_CTS_B		   0x0001B018  /* output pin for DTE mode */
				/* Add other Cellular Socket GPIOs to this so the pinctrls are initialized with UART2 */
				/* CELL_PWRON has an RC on the schematic to automatically enable the cellular modem with a delay,
				   but allow i.MX6 control as well.  Set to open drain without pull resistors in i.MX6. */
				/* Note: to provide control this may need to be coordinated with CELL_RESET */
        			MX6QDL_PAD_KEY_COL0__GPIO4_IO06            0x00010898 /* CELL_PWRON -- open drain with no pull res! */
				/* Use pull-up for default of CELL_RESET (hold in reset until want to wake up, drive low to clear reset) */
				/* Note: to do this we probably need some kind of driver initialization process run */
				MX6QDL_PAD_KEY_ROW0__GPIO4_IO07	           0x0001B098 /* CELL_RESET */  
				/* Use pull-down for default of GPIOs */
				MX6QDL_PAD_KEY_COL1__GPIO4_IO08            0x00013098 /* CELL_GPIO_PIN19 -- RING on Skywire, I/O on Digi */   				MX6QDL_PAD_KEY_ROW1__GPIO4_IO09            0x00013098 /* CELL_GPIO_PIN09 -- WAKE on Skywire, DTR# on Digi */
                        >;
                };

		/* MJ: need to set these up for DTE mode matching, imx6q/dl-pinfunc.h naming convention info sets 
		 * up the IOMUXC_UART3_UART_RX_DATA_SELECT_INPUT accordingly when named this way, so all that
		 * is left is to set this UART to initialize in DTE mode */
		pinctrl_uart3: uart3grp {
			fsl,pins = <
				/* schematic name = UART3_RXD */
				MX6QDL_PAD_EIM_D24__UART3_RX_DATA          0x0001B018  /* input pin for DTE mode */
				/* schematic name = UART3_TXD */
				MX6QDL_PAD_EIM_D25__UART3_TX_DATA          0x0001B018  /* output pin for DTE mode */
				/* schematic name = UART3_CTS# */
				MX6QDL_PAD_EIM_D23__UART3_RTS_B		   0x0001B018  /* input pin for DTE mode */
				/* schematic name = UART3_RTS# */
				MX6QDL_PAD_EIM_EB3__UART3_CTS_B		   0x0001B018  /* output pin for DTE mode */
			>;
		};
		
		pinctrl_usdhc2: usdhc2grp {
			fsl,pins = <
				/* clk and cmd have 22 Ohm series res on-board, so set to 25 Ohm@3.3V */
				MX6QDL_PAD_SD2_CLK__SD2_CLK                0x000100B1 /* updated pull res off */
				MX6QDL_PAD_SD2_CMD__SD2_CMD                0x000170B1 /* updated 47k pull-up */
				/* data don't have series resistors, so set to 50 Ohm@3.3V */
				MX6QDL_PAD_SD2_DAT0__SD2_DATA0             0x00017098 /* updated 47k pull-up */
				MX6QDL_PAD_SD2_DAT1__SD2_DATA1             0x00017098 /* updated 47k pull-up */
				MX6QDL_PAD_SD2_DAT2__SD2_DATA2             0x00017098 /* updated 47k pull-up */
				MX6QDL_PAD_SD2_DAT3__SD2_DATA3             0x00017098 /* updated 47k pull-up */
				MX6QDL_PAD_GPIO_2__SD2_WP                  0x0001B098 /* 100k pull-up */
				MX6QDL_PAD_GPIO_4__SD2_CD_B                0x0001B098 /* 100k pull-up */
				MX6QDL_PAD_GPIO_6__SD2_LCTL                0x0001B098 /* 100k pull-up */
			>;
		};

		/* MJ add SD3 interface for WiFi, use 47k pull-ups, these are 1.8V signals 50 Ohm@1.8V drive! */
		pinctrl_usdhc3: usdhc3grp {
			fsl,pins = <
				/* SD3 - 1.8V signals */
				/* clk and cmd have 22 Ohm series res on-board, so set to 33 Ohm@1.8V */
				MX6QDL_PAD_SD3_CLK__SD3_CLK                0x00010079 /* 3.3V Sabre 0x10059 */
				MX6QDL_PAD_SD3_CMD__SD3_CMD                0x00017079 /* 3.3V Sabre 0x17059 */
				/* data don't have series resistors, so set to 50 Ohm@1.8V & medium frequency */
				MX6QDL_PAD_SD3_DAT0__SD3_DATA0             0x00017069 /* 3.3V Sabre 0x17059 */
				MX6QDL_PAD_SD3_DAT1__SD3_DATA1             0x00017069 /* 3.3V Sabre 0x17059 */
				MX6QDL_PAD_SD3_DAT2__SD3_DATA2             0x00017069 /* 3.3V Sabre 0x17059 */
				MX6QDL_PAD_SD3_DAT3__SD3_DATA3             0x00017069 /* 3.3V Sabre 0x17059 */
				MX6QDL_PAD_SD3_RST__GPIO7_IO08		   0x00013069 /* WiFi Host Wake (in, pull-down) */
				MX6QDL_PAD_SD3_DAT6__GPIO6_IO18		   0x00013068 /* BT Host Wake (in, pull-down) */
				MX6QDL_PAD_SD3_DAT7__GPIO6_IO17		   0x00013068 /* BT Device Wake (out, pull-down) */
				/* Bluetooth Regulator Enable (BT_ENABLE) output */
				/* default to off with 100k pull-down, "reg_bt" enables */
				MX6QDL_PAD_SD3_DAT4__GPIO7_IO01		   0x00003029 /* 50 Ohms @ 1.8V */
				/* WiFi Regulator Enable (WIFI_ENABLE) output */
				/* default to off with 100k pull-down, "reg_wifi" enables */
				MX6QDL_PAD_SD3_DAT5__GPIO7_IO00		   0x00003029 /* 50 Ohms @ 1.8V */
			>;
		};

		pinctrl_usdhc4: usdhc4grp {
			fsl,pins = <
				MX6QDL_PAD_NANDF_ALE__SD4_RESET            0x0001B098
				MX6QDL_PAD_SD4_CLK__SD4_CLK                0x000100B1
				MX6QDL_PAD_SD4_CMD__SD4_CMD                0x000170B1
				MX6QDL_PAD_SD4_DAT0__SD4_DATA0             0x00017098
				MX6QDL_PAD_SD4_DAT1__SD4_DATA1             0x00017098
				MX6QDL_PAD_SD4_DAT2__SD4_DATA2             0x00017098
				MX6QDL_PAD_SD4_DAT3__SD4_DATA3             0x00017098
				MX6QDL_PAD_SD4_DAT4__SD4_DATA4             0x00017098
				MX6QDL_PAD_SD4_DAT5__SD4_DATA5             0x00017098
				MX6QDL_PAD_SD4_DAT6__SD4_DATA6             0x00017098
				MX6QDL_PAD_SD4_DAT7__SD4_DATA7             0x00017098
 			>;
		};

           /* MJ: default = 0x0001B0B0, update some to lower drive strength and  
              slow down the speed (Set to Slow instead of default of Medium) */
		pinctrl_wdog: wdoggrp {
			fsl,pins = <
				MX6QDL_PAD_GPIO_9__WDOG1_B                 0x0001B018
			>;
		};
	};

};

&mipi_csi {

	status = "disabled";

};
&mipi_dsi {

	status = "disabled";

};

/* Set pwm to "okay" if enabled in pin mux settings, otherwise "disabled" */
&pwm1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_pwm1>;
	status = "okay";
};

&pwm2 {
        status = "disabled";
};

&pwm3 {
        status = "disabled";
};

&pwm4 {
        status = "disabled";
};



/* Add these supply assignments from the Sabre SD board imx6qdl-sabresd.dtsi */
/* "&reg_*" names are used in imx6q.dtsi but get set up in our board file */ 
&reg_arm {
       vin-supply = <&sw1a_reg>;
};

&reg_pu {
       vin-supply = <&sw1c_reg>;
};

&reg_soc {
       vin-supply = <&sw1c_reg>;
};
&snvs_poweroff {
	status = "okay"; /* set to disable in order to disable PMIC control from iMX6 */
};


&ssi2 {
        status = "disabled";
};


&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	fsl,uart-has-rtscts;
	/*fsl,dte-mode;*/ /* wired to transceiver for DCE mode */
	status = "okay";
};

&uart2 {
        pinctrl-names = "default";
        pinctrl-0 = <&pinctrl_uart2>;
	fsl,uart-has-rtscts; /* flow control */
        fsl,dte-mode; /* DTE mode for Cellular interface */
        status = "okay";
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart3>;
	fsl,uart-has-rtscts; /* flow control */
        fsl,dte-mode; /* DTE mode for Bluetooth interface */
	status = "okay";
};

&usbh1 {
	vbus-supply = <&reg_usb_h1_vbus>;
/*        dr_mode = "host"; */
        disable-over-current;
        pinctrl-names = "default";
        pinctrl-0 = <&pinctrl_usbh1>;
	status = "okay";
};

&usbotg {
	vbus-supply = <&reg_usb_otg_vbus>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg>;
	disable-over-current;
	srp-disable;
	hnp-disable;
	adp-disable;
	status = "okay";
};

&usbphy1 {
     /* Default 0x7 is nominal resistor trimming setting, SabreSD uses 0x5 */
     tx-d-cal = <0x7>; 
};

&usbphy2 {
     /* Default 0x7 is nominal resistor trimming setting, SabreSD uses 0x5 */
     tx-d-cal = <0x7>;
};

/* Maybe explicitly disabling these unused blocks will lower power */
&weim {
 	status = "disabled";
 };
&pcie {
 	status = "disabled";
 };
&uart4 {
	status = "disabled";
};
&uart5 {
	status = "disabled";
};
&spdif {
	status = "disabled";
};
&gpmi {
	status = "disabled";
};
&usdhc1 {
	status = "disabled";
};

&usdhc2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usdhc2>;
	bus-width = <4>;
	cd-gpios = <&gpio1 4 GPIO_ACTIVE_LOW>;
	wp-gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
	no-1-8-v;
	keep-power-in-suspend;
	enable-sdio-wakeup;
	status = "okay";
};

/* MJ - this part needs some work... not sure how it needs to be initialized for Sterling-LWB */
&usdhc3 {
	/* copied the commented out stuff below... I am thinking the "interrupts" assignment should contain the wake gpio
	   (can we use 2), but I am not sure -- needs more research.  Also, need to put in compatible with Sterling-LWB? */
	/*compatible = "fsl,imx6q-usdhc";*/
	/*reg = <0x02194000 0x4000>;*/
	/*interrupts = <0 23 0x04>;*/
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usdhc3>;
	bus-width = <4>;
	non-removable; /* How do we set the bus to only 1.8V?  NVCC_SD3 = 1.8V, but is there a eFuse or register setting? */
	keep-power-in-suspend;
	enable-sdio-wakeup; /* need to set GPIO for wake to function??? */
	status = "okay";
};

&usdhc4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usdhc4>;
	bus-width = <8>;
	non-removable;
	no-1-8-v;
	keep-power-in-suspend;
	status = "okay";
};

&wdog1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_wdog>;
        /* MJ: I think the driver needs to know whether to set the internal or external wdog_b */
	fsl,wdog_b; /* MJ: I think this enables the "software" reset aka "internal" reset wdog_b signal */
	/*fsl,ext-reset-output; *//* MJ: I think this enables the "external" reset pad wdog_b */
	status = "okay";
};

/* MJ: Comment out pinctrl too - I think wdog2 is for TZ only */
&wdog2 {
        /*pinctrl-names = "default";*/
	/*pinctrl-0 = <&pinctrl_wdog>;*/
	/*fsl,ext-reset-output; */ /* MJ: I think this enables the "external" reset pad wdog_b */
	status = "disabled";
};


